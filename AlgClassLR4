#include <iostream>
#include <fstream>
using namespace std;

const int not_a_square_matrix = 0;
const int out_of_array = 1;

class Error
{
private:
	int err_type;
public:
	Error(int i) : err_type(i) {};
	int ErrType()
	{
		return err_type;
	}
	~Error(){};
};

class Zn //множество вычетов по модулю 5
{
private:
	unsigned int c; //образ числа

public:
	Zn()
	{
		c = 0;
	}
	Zn(int n_v) : c(n_v%5){};

	Zn operator + (const Zn& obj) //сложение по модулю 5
	{
		Zn result = obj;
		result.c = (c + obj.c) % 5;
		return result;
	}

	Zn operator * (const Zn& obj) //умножение по модулю 5
	{
		Zn result = obj;
		result.c = (c * obj.c) % 5;
		return result;
	}

	friend fstream& operator << (fstream&, Zn&);
	friend ostream& operator << (ostream&, Zn&);
	~Zn(){}; //деструктор
};

fstream& operator << (fstream& f, Zn& obj)
{
	f << obj.c;
	return f;
}

ostream& operator << (ostream& c, Zn& obj)
{
	c << obj.c;
	return c;
}

class MatrixZn
{
private:
	Zn** matr;//сама матрица
	unsigned int n; //строки
	unsigned int m; //столбцы

public:
	MatrixZn(Zn **matr_v, int n_v, int m_v)
	{
		n = n_v;
		m = m_v;
		if (n != m) throw Error(not_a_square_matrix);
		matr = new Zn*[n];
		for (unsigned int i = 0; i < m; i++)
		{
			matr[i] = new Zn[m];
		}
		for (unsigned int i = 0; i < n; i++)
		{
			for (unsigned int j = 0; j < m; j++)
			{
				matr[i][j] = matr_v[i][j];
			}
		}
	}
	MatrixZn(int n_v, int m_v)
	{
		n = n_v;
		m = m_v;
		matr = new Zn*[n];
		for (unsigned int i = 0; i < n; i++)
		{
			matr[i] = new Zn[m];
		}
		for (unsigned int i = 0; i < n; i++)
		{
			for (unsigned int j = 0; j < m; j++)
			{
				matr[i][j] = 0;
			}
		}
	}

	MatrixZn(const MatrixZn& obj) //конструктор копирования
	{
		n = obj.n;
		m = obj.m;
		matr = new Zn*[n];
		for (unsigned int i = 0; i < n; i++)
		{
			matr[i] = new Zn[m];
		}
		for (unsigned int i = 0; i < n; i++)
		{
			for (unsigned int j = 0; j < m; j++)
			{
				matr[i][j] = obj.matr[i][j];
			}
		}
	}

	MatrixZn operator * (const Zn& obj) //умножение на объект класса Zn
	{
		MatrixZn result(*this);
		for (unsigned int i = 0; i < n; i++)
		{
			for (unsigned int j = 0; j < m; j++)
			{
				result.matr[i][j] = matr[i][j] * obj;
			}
		}
		return result;
	}

	MatrixZn operator ~()//транспонирование для квадратных матриц
	{
		for (unsigned int i = 0; i < n; i++)
		{
			for (unsigned int j = i; j < m; j++)
			{
				Zn k;
				k = matr[i][j];
				matr[i][j] = matr[j][i];
				matr[j][i] = k;
			}
		}
		return *this;
	}

	MatrixZn operator | (const MatrixZn& obj) //конкатенация
	{
		MatrixZn mid(n, m + obj.m);
		MatrixZn concat(mid);
		for (unsigned int i = 0; i < n; i++)
		{
			for (unsigned int j = 0; j < m; j++)
			{
				concat.matr[i][j] = matr[i][j];
			}
			for (unsigned int j = 0; j < obj.m; j++)
			{
				concat.matr[i][j + m] = obj.matr[i][j];
			}
		}
		return concat;
	}

	Zn & operator () (unsigned int i, unsigned int j) //получение элемента матрицы по индексу
	{
		if ((i >= n) || (j >= m))
		{
			throw Error(out_of_array);
		}
		else
		{
			return matr[i][j];
		}
	}

	friend fstream& operator << (fstream&, MatrixZn&);
	friend ostream& operator << (ostream& c, MatrixZn& obj);
	friend fstream fOpen(string);

	~MatrixZn()
	{
		for (unsigned int i = 0; i < n; i++)
		{
			delete[] matr[i];
		}
		delete[] matr;
	}
};

fstream& operator << (fstream& f, MatrixZn& obj)
{
	for (unsigned int i = 0; i < obj.n; i++)
	{
		for (unsigned int j = 0; j < obj.m; j++)
		{
			f << obj.matr[i][j];
			f << "  ";
		}
		f << endl;
	}
	return f;
}

ostream& operator << (ostream& c, MatrixZn& obj)
{
	for (unsigned int i = 0; i < obj.n; i++)
	{
		for (unsigned int j = 0; j < obj.m; j++)
		{
			c << obj.matr[i][j];
			c << "  ";
		}
		c << endl;
	}
	return c;
}

Zn** create_M()
{
	Zn** contrM = new Zn*[3];
	for (int i = 0; i < 3; i++)
	{
		contrM[i] = new Zn[3];
	}
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			int random_number = rand() % 10 + 1; //рандомное число в диапазоне 1..10
			contrM[i][j] = Zn(random_number);
		}
	}
	return contrM;
}

Zn** create_M2()
{
	Zn** contrM2 = new Zn*[3];
	for (int i = 0; i < 3; i++)
	{
		contrM2[i] = new Zn[3];
	}
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			int random_number = rand() % 10 + 1;
			contrM2[i][j] = Zn(random_number);
		}
	}
	return contrM2;
}

int main()
{
	try
	{
		/*поток fstream - по умолчанию открывается для ввода вывода
		ifstream - по умолчанию для ввода
		ofstreamи - по умолчанию для вывода*/
		Zn c1(4);
		Zn c2(4);
		cout << c1 + c2;
		cout << endl;

		Zn** contrM = create_M();
		Zn** contrM2 = create_M2();
		MatrixZn cMatrZn(contrM, 3, 3);
		MatrixZn cMatrZn2(contrM2, 3, 3);
		//MatrixZn cMatrZn2(contrM2, 2, 3); //бросит исключение not_a_square_matrix

		cout << endl << "get an element from matrix" << endl;
		//cout << cMatrZn(1, 7); //бросит исключение out_of_array
		cout << cMatrZn(1, 1); //6
		cout << endl;

		cout << endl << "concatention" << endl;
		cout << "(M1) 1st matrix:" << endl;
		cout << cMatrZn;
		cout << "(M2) 2nd matrix:" << endl;
		cout << cMatrZn2;
		cout << "result" << endl;
		MatrixZn cMatrZn3(cMatrZn | cMatrZn2);
		cout << cMatrZn3;
		cout << endl;

		cout << "transposition M1" << endl;
		MatrixZn cMatrZn4 = ~cMatrZn;
		cout << cMatrZn4;
		cout << endl;

		cout << "class object * matrix" << endl;
		MatrixZn cMatrZn5 = cMatrZn * c1;
		cout << cMatrZn5;
		cout << endl;

		fstream f("file.txt");
		f << cMatrZn;
	}
	catch (Error err)
	{
		switch (err.ErrType())
		{
		case not_a_square_matrix:
			cerr << "Matrix must be square!!";
			break;
		case out_of_array:
			cerr << "out of the array";
			break;
		}
	}
	system("pause");
	return 0;
}
