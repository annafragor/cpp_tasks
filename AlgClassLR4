#include <iostream>
#include <fstream>

using namespace std;

const string FILENAME = "file.txt";
class Error
{
private:
	int pole;
public:
	Error(int i) : pole(i){};
	~Error(){};
};

class Zn //множество вычетов по модулю 5
{
private:
	unsigned int c; //образ числа

public:
	Zn()
	{
		c = 0;
	}
	Zn(int n_v) : c(n_v%5){};

	Zn operator + (const Zn& obj) //сложение по модулю 5
	{
		Zn result = obj;
		result.c = (c + obj.c) % 5;
		return result;
	}

	Zn operator * (const Zn& obj) //умножение по модулю 5
	{
		Zn result = obj;
		result.c = (c * obj.c) % 5;
		return result;
	}
	
	friend void printZn(const Zn&);
	friend void FPrintZn(fstream&, Zn&);
	~Zn(){}; //деструктор
};

void FPrintZn(fstream& f, Zn& obj)
{
	f << obj.c << "  ";
	return;
}

void printZn(const Zn& obj)
{
	cout << obj.c << "  ";
	return;
}

class MatrixZn
{
private:
	Zn** matr;//сама матрица
	unsigned int n; //строки
	unsigned int m; //столбцы

public:
	MatrixZn(Zn **matr_v, int n_v, int m_v)
	{
		n = n_v;
		m = m_v;
		matr = new Zn*[n];
		for (unsigned int i = 0; i < m; i++)
		{
			matr[i] = new Zn[m];
		}
		for (unsigned int i = 0; i < n; i++)
		{
			for (unsigned int j = 0; j < m; j++)
			{
				matr[i][j] = matr_v[i][j];
			}
		}

	}
	MatrixZn(int n_v, int m_v)
	{
		n = n_v;
		m = m_v;
		matr = new Zn*[n];
		for (unsigned int i = 0; i < n; i++)
		{
			matr[i] = new Zn[m];
		}
		for (unsigned int i = 0; i < n; i++)
		{
			for (unsigned int j = 0; j < m; j++)
			{
				matr[i][j] = 0;
			}
		}
	}

	MatrixZn(const MatrixZn& obj) //конструктор копирования
	{
		n = obj.n;
		m = obj.m;
		matr = new Zn*[n];
		for (unsigned int i = 0; i < m; i++)
		{
			matr[i] = new Zn[m];
		}
		for (unsigned int i = 0; i < n; i++)
		{
			for (unsigned int j = 0; j < m; j++)
			{
				matr[i][j] = obj.matr[i][j];
			}
		}
	}

	MatrixZn operator * (const Zn& obj) //умножение на объект класса Zn
	{
		MatrixZn result(*this);
		for (unsigned int i = 0; i < n; i++)
		{
			for (unsigned int j = 0; j < m; j++)
			{
				result.matr[i][j] = matr[i][j] * obj;
			}
		}
		return result;
	}

	MatrixZn operator ~()//транспонирование для квадратных матриц
	{
		for (unsigned int i = 0; i < n; i++)
		{
			for (unsigned int j = i; j < m; j++)
			{
				Zn k;
				k = matr[i][j];
				matr[i][j] = matr[j][i];
				matr[j][i] = k;
			}
		}
		return *this;
	}

	MatrixZn operator | (const MatrixZn& obj) //конкатенация
	{
		if (n == obj.n)
		{
			MatrixZn mid(n, m + obj.m);
			MatrixZn concat(mid);
			for (unsigned int i = 0; i < n; i++)
			{
				for (unsigned int j = 0; j < m; j++)
				{
					concat.matr[i][j] = matr[i][j];
				}
				for (unsigned int j = 0; j < obj.m; j++)
				{
					concat.matr[i][j + m] = obj.matr[i][j];
				}
			}
			return concat;
		}
		else
		{
			terminate();
		}
	}

	Zn & operator () (unsigned int i, unsigned int j) //получение элемента матрицы по индексу
	{
		if ((i <= n) && (j <= m))
		{
			return matr[i][j];
		}
		else
			terminate();
	}

	friend void PrintM(const MatrixZn&);
	friend void FPrintM(const MatrixZn&, string);
	friend fstream fOpen(string);

	~MatrixZn()
	{
		for (unsigned int i = 0; i < n; i++)
		{
			delete[] matr[i];
		}
	//	delete[] matr; - если этой строки нет - все работает, если она есть, возникает брейк на ней.
	//я так и не поняла, как удалять двумерный массив. смотрела в интернете, и вроде на cppstudio был предложен
	//вариант удаления массива без этой последней строчки, но потом я спросила у лектора, и он сказал, 
	//что эта последняя строчка нужна.
	}
};

void PrintM(const MatrixZn& obj)
{
	for (unsigned int i = 0; i < obj.n; i++)
	{
		for (unsigned int j = 0; j < obj.m; j++)
		{
			printZn(obj.matr[i][j]);
			cout << "  ";
		}
		cout << endl;
	}
}

void FPrintM(const MatrixZn& obj, string filename)
{
	fstream f = fOpen(filename);//открыли файл
	for (unsigned int i = 0; i < obj.n; i++)
	{
		for (unsigned int j = 0; j < obj.m; j++)
		{
			FPrintZn(f, obj.matr[i][j]); //тут возникает ошибка, разрешить которую я не смогла
			//attempting to reference a deleted function
		}
	}
	return;
}

fstream fOpen(string filename)
{
	fstream f;
	f.open(filename);  //открыли файл для записи и чтения
	//файл создается в папке, где лежит main.cpp
	if (!f.is_open()) //проверка открытия файла
	{
		cerr << "file couldn't be opened" << endl;
	}
	return f;
}

Zn** create_M()
{
	Zn** contrM = new Zn*[3];
	for (int i = 0; i < 3; i++)
	{
		contrM[i] = new Zn[3];
	}
	contrM[0][0] = Zn(1);
	contrM[0][1] = Zn(2);
	contrM[0][2] = Zn(3);
	contrM[1][0] = Zn(5);
	contrM[1][1] = Zn(6);
	contrM[1][2] = Zn(7);
	contrM[2][0] = Zn(9);
	contrM[2][1] = Zn(9);
	contrM[2][2] = Zn(1);
	return contrM;
}

Zn** create_M2()
{
	Zn** contrM2 = new Zn*[3];
	for (int i = 0; i < 3; i++)
	{
		contrM2[i] = new Zn[3];
	}
	contrM2[0][0] = Zn(1);
	contrM2[0][1] = Zn(5);
	contrM2[0][2] = Zn(10);
	contrM2[1][0] = Zn(2);
	contrM2[1][1] = Zn(8);
	contrM2[1][2] = Zn(11);
	contrM2[2][0] = Zn(3);
	contrM2[2][1] = Zn(9);
	contrM2[2][2] = Zn(12);
	return contrM2;
}

int main()
{
	/*
	поток fstream - по умолчанию открывается для ввода вывода
	ifstream - по умолчанию для ввода
	ofstreamи - по умолчанию для вывода
	*/
	Zn c1(4);
	Zn c2(4);
	printZn(c1 + c2);
	cout << endl;

	Zn** contrM = create_M();
	Zn** contrM2 = create_M2();
	MatrixZn cMatrZn(contrM, 3, 3);
	MatrixZn cMatrZn2(contrM2, 3, 3);

	FPrintM(cMatrZn2, "file.txt");

	cout << endl << "get an element from matrix" << endl;
	printZn(cMatrZn(1, 1)); //6
	cout << endl;

	cout << endl << "concatention" << endl;
	cout << "(M1) 1st matrix:" << endl;
	PrintM(cMatrZn);
	cout << "(M2) 2nd matrix:" << endl;
	PrintM(cMatrZn2);
	cout << "result" << endl;
	MatrixZn cMatrZn3(cMatrZn | cMatrZn2);
	PrintM(cMatrZn3);
	cout << endl;

	cout << "transposition M1" << endl;
	MatrixZn cMatrZn4 = ~cMatrZn;
	PrintM(cMatrZn4);
	cout << endl;

	cout << "class object * matrix" << endl;
	MatrixZn cMatrZn5 = cMatrZn * c1;
	PrintM(cMatrZn5);
	cout << endl;

	system("pause");
	return 0;
}
