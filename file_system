#include <iostream>
#include <string>
#include <map>

using namespace std;

class Directory;
class File;

class File
{
	string name; //имя
	string content; //содержание файла
	bool onlyForAdmin;
	bool isOpened;
public:
	File() : onlyForAdmin(false), isOpened(false){};
	File(string name_v) : name(name_v), onlyForAdmin(false), isOpened(false){};

	void chmod(bool makeProtected)
	{//установка прав доступа на файл
		if (makeProtected == true)
			onlyForAdmin = true;
		else
			onlyForAdmin = false;
		return;
	}
	void opCl(bool open)
	{
		if (open == true)
			isOpened = true;
		else
			isOpened = false;
		return;
	}
	void writeInFile(string cont)
	{
		if (isOpened == true)
		{
			content = content + " " + cont;
		}
		else
			throw "file isn't opened, cant add info there";//тут будет исключение
		return;
	}
	void cleanFile()
	{
		if (isOpened == true)
		{
			content = "";
		}
		else
			throw "file isn't opened, cant delete content";//тут будет исключение
		return;
	}
	void printFile()
	{
		cout << content;
		return;
	}
	friend Directory;
	~File(){};
};

class Name
{
	char k;
public:
	Name(char k_v): k(k_v){};
	char errType() const
	{
		return k;
	}
	~Name(){};
};

class FileWork
{
	char k;
public:
	FileWork(char k_v) : k(k_v){};
	char errType() const
	{
		return k;
	}
	~FileWork(){};
};



class Directory
{
	string name;
	Directory* dirs[256]; //массив указателей на директории из данной директории
	File* files[256]; //массив указателей на файлы в этой директории
public:
	Directory(){};
	Directory(string name_v) : name(name_v){/*, dirs{ 0 }, files{0} так нельзя обнулить массив*/
		for (int i = 0; i < 256; i++)
		{
			dirs[i] = nullptr;
		}
		for (int i = 0; i < 256; i++)
		{
			files[i] = nullptr;
		}
	}

	Directory* createDirectory(string name_v)//create
	{//создает новую диркеторию внутри текущей
		int i = 0;
		if (ifDirectoryInDirectory(name_v) == true)
			throw Name('d');//ok
		while (dirs[i] != nullptr)
		{
			i++;
		}
		if (i == 256)
			throw FileWork('o');//ok
		else
			dirs[i] = new Directory(name_v);;
		return dirs[i];
	}
	File* createFile(string name_v) //create
	{
		int i = 0;
		if (ifFileInDirectory(name_v) == true)
			throw Name('f');//ok
		File* obj = new File(name_v);
		while (files[i] != nullptr)
		{
			i++;
		}
		if (i == 256)
			throw FileWork('O'); //ok
		else
			files[i] = obj;
		return obj;
	}
	void deleteDirectory(string name_v)
	{//удаляет указанную диркеторию внутри текущей
		int i = 0;
		while (dirs[i]->name != name_v)
		{
			i++;
		}
		delete dirs[i];
		dirs[i] = 0;
	}
	void deleteFile(string name_v, bool suprm)
	{//удаляет указанный файл внутри текущей директории
		int i = 0;
		while (files[i]->name != name_v)
		{
			i++;
		}
		if ((files[i]->onlyForAdmin == true) && (suprm == false))
			throw FileWork('d');//ok
		else if (files[i]->isOpened == true)
			throw FileWork('p');//ok
		else
		{
			delete files[i];
			files[i] = 0;
		}
	}
	void printWholeDirectory() 
	{//list
		cout << "contents of " << name << endl;
		cout << "directories of " << name << ":" << endl;
		for (int i = 0; i < 256; i++)
		{
			if (dirs[i] != nullptr)
			{
				cout << dirs[i]->name << endl;
				dirs[i]->printWholeDirectory();
			}
		}
		cout << "files of " << name << ":" << endl;
		for (int i = 0; i < 256; i++)
		{
			if (files[i] != nullptr)
				cout << files[i]->name << endl;
		}
	}
	void printDirectory()
	{
		cout << "contents of " << name << endl;
		cout << "directories of " << name << ":" << endl;
		for (int i = 0; i < 256; i++)
		{
			if (dirs[i] != nullptr)
			{
				cout << dirs[i]->name << endl;
			}
		}
		cout << "files of " << name << ":" << endl;
		for (int i = 0; i < 256; i++)
		{
			if (files[i] != nullptr)
				cout << files[i]->name << endl;
		}

	}
	bool ifFileInDirectory(string name_v)
	{//наxодит указанный файл внутри текущей директории, не заходя в лежащие в ней директории
		for (int i = 0; i < filesNum(); i++)
		{
			if (files[i] && files[i]->name == name_v)
				return true;
		}
		return false;
	}
	bool ifDirectoryInDirectory(string name_v)
	{//наxодит указанную директорию внутри текущей, не заходя в лежащие в ней директории
		for (int i = 0; i < dirsNum(); i++)
		{
			if (dirs[i] && dirs[i]->name == name_v)
				return true;
		}
		return false;
	}
	Directory* goToDir(string name_v)
	{
		if (ifDirectoryInDirectory(name_v) == true)
		{
			for (int i = 0; i < dirsNum(); i++)
			{
				if (dirs[i]->name == name_v)
					return dirs[i];
			}
		}
		else
		{
			throw Name('n');//ok
			return NULL;
		}
	}
	int dirsNum()
	{//ищем количество директорий в текущей
		int num = 0;
		for (int i = 0; i < 256; i++)
		{
			if (dirs[i] != nullptr)
				num++;
		}
		return num;
	}
	int filesNum()
	{//ищем количество файлов в текущей директории
		int num = 0;
		for (int i = 0; i < 256; i++)
		{
			if (files[i] != nullptr)
				num++;
		}
		return num;
	}
	string objName(int i, int obj)
	{
		switch (obj)
		{
		case 0://file
			return files[i]->name;
			break;
		case 1://directory
			return dirs[i]->name;
			break;
		}
	}
	File* returnFile(string adr)
	{
		if (ifFileInDirectory(adr) == true)
		{
			for (int i = 0; i < filesNum(); i++)
			{
				if ((files[i])->name == adr)
					return files[i];
			}
		}
		else
		{
			throw FileWork('n');//ok
			return NULL;
		}
	}
	friend void findFile(string, Directory*, string);//ищем файл по всему дереву
	friend int howManyWords(string, char);
	friend string* breakToWords(string, char);
	friend void deleteWithAddres(Directory*, string);
	friend File;
	~Directory()
	{
		for (int i = 0; i < sizeof(dirs) / sizeof(dirs[0]); i++)
		{
			delete dirs[i];
		}
		for (int i = 0; i < sizeof(files) / sizeof(files[0]); i++)
		{
			delete files[i];
		}
	}
};

void findFile(string name_v, Directory* root, string path)
{//ищем файл по всему дереву
	path = path + root->name + "/";
	if (root->ifFileInDirectory(name_v) == true)
	{
		cout << endl << path + name_v;
	}
	if (root->dirsNum() != 0)
	{
		for (int i = 0; i < root->dirsNum(); i++)
		{
			findFile(name_v, root->dirs[i], path);
		}
	}
	return;
}
int howManyWords(string str, char separator)
{
	int wordsNum = 1;
	for (unsigned int i = 0; i < str.length(); i++)
	{//посчитали количество разделителей + 1 (2 разделителя -> 3 слова)
		if (str[i] == separator)
		{
			wordsNum++;
		}
	}
	return wordsNum;
}
string* breakToWords(string str, char separator)
{
	string word = "";
	int wordsNum = howManyWords(str, separator);
	cout << wordsNum << endl;
	string* words = new string[wordsNum];
	int k = 0;
	for (unsigned int i = 0; i < str.length(); i++)
	{
		if (str[i] == separator)
		{
			words[k] = word;
			k++;
			word = "";
		}
		else
		{
			word += str[i];
		}
	}
	words[k] = word;
	return words;
}
void deleteWithAddres(Directory* root, string adr)
{
	int n = howManyWords(adr, '/');//OK
	string* names = new string[n];//OK
	names = breakToWords(adr, '/');//массив, заполненный названиями директорий в пути + последняя ячейка - название файла
	//(n-1) - количество директорий
	cout << names[n - 1];

	for (int i = 1; i < n - 1; i++)
	{
		if (root->ifDirectoryInDirectory(names[i]) == true)
		{
			for (int j = 0; j < root->dirsNum(); j++)
			{
				if ((root->dirs[j])->name == names[i]){
					root = root->dirs[j];
				}
			}
		}
		else
		{
			cerr << "wrong path" << endl;
		}
	}
	root->deleteFile(names[n - 1], false);
	delete[] names;
}


int main()
{
	string str;
	string command = "";
	string adr;
	string name;
	Directory* root = new Directory("root");
	Directory* thisDir = root;
	bool isProtectedNow = false;
	cout << "This is emulation of file system." << endl << "You are now in 'root'" << endl;

	map <string, int> mapping;
	mapping["mkdir"] = 0;
	mapping["mkfile"] = 1;
	mapping["tree"] = 2;
	mapping["chmod"] = 3;
	mapping["rm"] = 4;
	mapping["rm_r"] = 5;
	mapping["su_rm"] = 6;
	mapping["cd"] = 7;
	mapping["pwd"] = 8;
	mapping["list"] = 9;
	mapping["open"] = 10;
	mapping["close"] = 11;
	mapping["write"] = 12;
	mapping["clfile"] = 13;
	mapping["read"] = 14;
	mapping["clc"] = 15;
	mapping["find"] = 16;
	mapping["find_r"] = 17;
	mapping["root"] = 18;
	mapping["finish"] = 19;

	while (command != "finish")
	{
		try
		{
			cin >> command;
			switch (mapping[command])
			{
			case 0:
				cin >> adr;
				thisDir->createDirectory(adr);
				break;
			case 1:
				cin >> adr;
				thisDir->createFile(adr);
				break;
			case 2:
				root->printWholeDirectory();
				break;
			case 3:
				cin >> adr;
				if (isProtectedNow == false)
				{
					(thisDir->returnFile(adr))->chmod(true);
					isProtectedNow = true;
				}
				else{
					(thisDir->returnFile(adr))->chmod(false);
					isProtectedNow = false;
				}
				break;
			case 4:
				cin >> adr;
				deleteWithAddres(root, adr);
				break;
			case 5:
				cin >> adr;
				thisDir->deleteDirectory(adr);
				break;
			case 6:
				cin >> adr;
				thisDir->deleteFile(adr, true);
				break;
			case 7:
				cin >> adr;
				thisDir = thisDir->goToDir(adr);
				break;
			case 8:
				thisDir->printDirectory();
				break;
			case 9:
				thisDir->printWholeDirectory();
				break;
			case 10:
				cin >> adr;
				(thisDir->returnFile(adr))->opCl(true);
				break;
			case 11:
				cin >> adr;
				(thisDir->returnFile(adr))->opCl(false);
				break;
			case 12:
				cin >> name;
				cin >> adr;
				(thisDir->returnFile(name))->writeInFile(adr);
				break;
			case 13:
				cin >> adr;
				(thisDir->returnFile(adr))->cleanFile();
				break;
			case 14:
				cin >> adr;
				(thisDir->returnFile(adr))->printFile();
				break;
			case 15:
				system("cls");
				break;
			case 16:
				cin >> adr;
				if (thisDir->ifFileInDirectory(adr) != true)
					cout << "this file doesn't exist in this directory" << endl;
				else
					cout << "there is your file in this directory" << endl;
				break;
			case 17:
				cin >> adr;
				findFile(adr, root, "");
				break;
			case 18:
				thisDir = root;
				break;
			case 19:
				for (int i = 0; i < 256; i++)
				{
					root->deleteDirectory(root->objName(i, 1));
					root->deleteFile(root->objName(i, 0), true);
				}
				delete root;
				return 0;
				break;
			default:
				cerr << endl << "wrong command" << endl;
				break;
			}
		}
		catch (const Name& err)
		{
			switch (err.errType())
			{
			case 'f':
				cerr << "File with the same name already exists in this diretory." << endl;
				break;
			case 'd':
				cerr << "Directory with the same name already exists in this diretory." << endl;
				break;
			case 'n':
				cerr << "no dir with such name in this directory" << endl;
				break;
			}
		}
		catch (const FileWork& err)
		{
			switch (err.errType())
			{
			case 'd':
				cerr << "for deleting this file, you should have administration rights" << endl;
				break;
			case 'o':
				cerr << "This directory is ful. There's no place for a new directory." << endl;
				break;
			case 'O':
				cerr << "This directory is ful. There's no place for a new file." << endl;
				break;
			case 'p':
				cerr << "can't delete this file, cause it's still opened" << endl;
				break;
			case 'n':
				cerr << "no file with such name in this directory" << endl;
				break;
			}
		}
	}
	return 0;
}
